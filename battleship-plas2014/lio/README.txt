(c) MIT Lincoln Laboratory 2014

This directory contains an implementation of Battleship in Haskell/LIO
using information flow control to avoid the need for a trusted
referee.  Instead, a pair of player interfaces communicate directly
with each other.

Each player interface starts a player.  Players are untrusted, and
each player interface is secure against the other -- even if the other
player interface is replaced by untrusted code, the security of the
first player interface is assured.

The program uses a client/server architecture.  Almost all of the
computation happens in the server, which spawns two player interfaces
as threads.  A client communicates with the server via a TCP
connection, connecting a player's client and server sides.

----

You will need to install Haskell Platform
(http://www.haskell.org/platform).  Then use cabal to install the
packages haddock (for generating documentation) and lio. (See
http://hackage.haskell.org for information about both packages).

To compile the program and generate its documentation, edit the script
./build so that the variable dist is the fully qualified version of
the lio (current) directory.

Then, simply run

./build

This will put the executable in bin/battleship and the documentation
in html/battleship/index.html.

Optionally, run

./cleanup

to clean up after the build, removing the dist subdirectory.

The program can be run as follows.

First, start the server running (optionally replace 2345 by a
different port):

bin/battleship server 2345

Then, each of the two players can start (replace localhost by the
hostname of the server, if needed) battleship:

bin/battleship client localhost 2345

Usage should be self-explanatory.

----

The .cabal file is battleship.cabal, and Setup.hs was generated by cabal.

The Haskell source is in the subdirectory src.

See the file ORGANIZATION.txt for the program's organization.
